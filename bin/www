#!/usr/bin/env node

var app = require('../app');
var _ = require('underscore');

app.set('port', process.env.PORT || 85);

var server = app.listen(app.get('port'), function() {
	console.log('Express server listening on port ' + server.address().port);
});

var io = require('socket.io').listen(server);

// 根据不同用户缓存订餐数据
var cache = global.cache = {
	order: {}
};

// socket
io.sockets.on('connection', function(socket) {
	//点菜 d = {uid: 111, data: d}
	socket.on('server.menu.add', function(d) {
		if (!d || !d.uid) return;

		var uid = d.uid,
			data = d.data,
			cart = cache.order[uid] || (cache.order[uid] = []), // 用户购物车
			fid = data.id, // food id
			cc = _.findWhere(cart, {
				id: fid
			});

		if (cc) {
			cart.forEach(function(c, i) {
				if (c.id === fid) {
					cart[i] = data;
					return;
				};
			});
		} else {
			cart.push(data);
		};

		socket.broadcast.emit('client.menu.add', {
			uid: uid,
			data: data
		});
	});
	//撤菜
	socket.on('server.menu.remove', function(d) {
		if (!d || !d.uid) return;

		var uid = d.uid,
			data = d.data,
			cart = cache.order[uid] || (cache.order[uid] = []), // 用户购物车
			fid = data.id, // food id
			cc = _.findWhere(cart, {
				id: fid
			});

		if (cc) {
			cart.forEach(function(c, i) {
				if (c.id === fid) {
					cc.cart -= 1;
					if (cc.cart <= 0) {
						cart.splice(i, 1);
					} else {
						cart[i] = cc;
					};
					return;
				};
			});

			socket.broadcast.emit('client.menu.remove', {
				fid: fid,
				uid: uid
			});
		};

	});
	//重置订单
	socket.on('server.menu.reset', function(d) {
		if (!d || !d.uid) return;

		var uid = d.uid;
		cache.order[uid] = []; // 清空用户购物车

		socket.broadcast.emit('client.menu.reset', {
			uid: uid
		});
	});
});